name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore ./src/UseCase.sln

      - name: Build project
        run: dotnet build ./src/UseCase.sln --configuration Release

      - name: Run tests with coverage
        run: dotnet test ./src/UseCase.sln --no-build --configuration Release --collect:"XPlat Code Coverage"

      - name: Install ReportGenerator
        run: dotnet tool install --global dotnet-reportgenerator-globaltool

      - name: Generate coverage report
        run: reportgenerator -reports:**/coverage.cobertura.xml -targetdir:./coverage-report -reporttypes:Html

      - name: Upload coverage report
        uses: actions/upload-artifact@v2
        with:
          name: coverage-report
          path: ./coverage-report

      - name: Generate JaCoCo Badge
        uses: cicirello/jacoco-badge-generator@v3
        with:
          jacoco-cov-file: ./coverage-report/coverage.cobertura.xml
          badge-file: ./coverage-report/badge.svg

      - name: Upload Badge
        uses: actions/upload-artifact@v2
        with:
          name: coverage-badge
          path: ./coverage-report/badge.svg

      - name: Pack NuGet package
        run: dotnet pack ./src/UseCase.sln --configuration Release -o ./lib/release

      - name: List contents of release directory
        run: ls -R ./lib/release

      - name: Push to NuGet.org
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: dotnet nuget push lib/release/*.nupkg --source https://api.nuget.org/v3/index.json --api-key $NUGET_API_KEY
